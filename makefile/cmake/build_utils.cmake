# 设置编译平台
if(NOT PLATFORM_NAME)
    set(PLATFORM_NAME "LINUX64")
endif()
# 设置是否编译Test
if(NOT BUILD_TEST)
    set(BUILD_TEST "False")
endif()
# 设置是否启用内存越界检测
if(NOT ENABLE_ASAN)
    set(ENABLE_ASAN "False")
endif()
# 设置编译选项Debug/Release
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()
if (CMAKE_BUILD_TYPE STREQUAL "Debug") 
	set(DEBUG True)
elseif(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
	set(DEBUG True)
else()
	set(DEBUG False)
endif()

message("--build ${PROJECT_NAME} platform: ${PLATFORM_NAME}, build type: ${CMAKE_BUILD_TYPE}, build test: ${BUILD_TEST}")

# 配置目标文件夹名称
macro(config_target_dirname)
	set(TARGET_DIRNAME "")
	if(PLATFORM_NAME STREQUAL "WIN32")
		# win32 debug
		if(DEBUG)
			set(TARGET_DIRNAME x86-debug)
		else()
			set(TARGET_DIRNAME x86-release)
		endif()
	elseif (PLATFORM_NAME STREQUAL "WIN64")
		# win64 debug
		if(DEBUG)
			set(TARGET_DIRNAME x64-debug)
		else()
			set(TARGET_DIRNAME x64-release)
		endif()
	elseif (PLATFORM_NAME STREQUAL "LINUX32")
		# linux32 debug
		if(DEBUG)
			set(TARGET_DIRNAME linux32-debug)
		else()
			set(TARGET_DIRNAME linux32-release)
		endif()
	elseif (PLATFORM_NAME STREQUAL "LINUX64")
		# linux64 debug
		if(DEBUG)
			set(TARGET_DIRNAME linux64-debug)
		else()
			set(TARGET_DIRNAME linux64-release)
		endif()
	endif()
	message("Info: end config_target_dirname target dirname: ${TARGET_DIRNAME}")
endmacro(config_target_dirname)

# 配置目标文件输出目录(二进制和lib文件)
macro(config_target_path _prefix_path)
	set(TARGET_PATH "")
	config_target_dirname()
	set(TARGET_PATH ${_prefix_path}/bin/${TARGET_DIRNAME})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${TARGET_PATH})
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${TARGET_PATH})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${TARGET_PATH})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${TARGET_PATH})
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${TARGET_PATH})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${TARGET_PATH})
	message("Info: end config_target_path target path: ${TARGET_PATH}")
endmacro(config_target_path)


# 设置编译目录
macro(config_build_path _prefix_path)
	if ( NOT HAS_CONFIG_BUILDPATH)
		set(BUILD_PATH "")
		if(PLATFORM_NAME STREQUAL "WIN32")
			# win32 debug
			if(DEBUG)
				set(BUILD_PATH ${_prefix_path}/build/x86-debug)
			else()
				set(BUILD_PATH ${_prefix_path}/build/x86-release)
			endif()
		elseif (PLATFORM_NAME STREQUAL "WIN64")
			# win64 debug
			if(DEBUG)
				set(BUILD_PATH ${_prefix_path}/build/x64-debug)
			else()
				set(BUILD_PATH ${_prefix_path}/build/x64-release)
			endif()
		elseif (PLATFORM_NAME STREQUAL "LINUX32")
			# linux32 debug
			if(DEBUG)
				set(BUILD_PATH ${_prefix_path}/build/linux32-debug)
			else()
				set(BUILD_PATH ${_prefix_path}/build/linux32-release)
			endif()
		elseif (PLATFORM_NAME STREQUAL "LINUX64")
			# linux64 debug
			if(DEBUG)
				set(BUILD_PATH ${_prefix_path}/build/linux64-debug)
			else()
				set(BUILD_PATH ${_prefix_path}/build/linux64-release)
			endif()
		endif()
		set(CMAKE_BINARY_DIR ${BUILD_PATH})
		# 标记已配置好build路径
		set(HAS_CONFIG_BUILDPATH True)
	endif()
	message("Info: end config_build_path: ${CMAKE_BINARY_DIR}")
endmacro(config_build_path)

# 拷贝依赖库文件,因为_lib_paths是一个list参数
# 所以使用时需要按 copy_depend_libs("${DEPEND_LIBRARY_PATHS}")传参
function(copy_depend_libs _lib_paths)
	if (NOT TARGET_PATH)
		message("Error: ----------------taget path not set")
	endif()
	foreach(LIB_PATH ${_lib_paths})
		message("Info: copy_depend_libs lib path: ${LIB_PATH}")
		if(MSVC)
			# windows
			file(GLOB DEPEND_FILES ${LIB_PATH}/*.dll)
			file(COPY ${DEPEND_FILES} DESTINATION ${TARGET_PATH})
			file(GLOB DEPEND_FILES ${LIB_PATH}/*.pdb)
			file(COPY ${DEPEND_FILES} DESTINATION ${TARGET_PATH})
			file(GLOB DEPEND_FILES ${LIB_PATH}/*.manifest)
			file(COPY ${DEPEND_FILES} DESTINATION ${TARGET_PATH})
		else()
			# linux
			file(GLOB DEPEND_FILES ${LIB_PATH}/*.so*)
			file(COPY ${DEPEND_FILES} DESTINATION ${TARGET_PATH})
			file(GLOB DEPEND_FILES ${LIB_PATH}/*.so)
			file(COPY ${DEPEND_FILES} DESTINATION ${TARGET_PATH})
		endif()
		# 配置文件
		file(GLOB DEPEND_FILES ${LIB_PATH}/*.json)
		file(COPY ${DEPEND_FILES} DESTINATION ${TARGET_PATH})
		file(GLOB DEPEND_FILES ${LIB_PATH}/*.yaml)
		file(COPY ${DEPEND_FILES} DESTINATION ${TARGET_PATH})
	endforeach()
	message("Info: end copy_depend_libs the dest dir:  ${TARGET_PATH}")
endfunction(copy_depend_libs)
